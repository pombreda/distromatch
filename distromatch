#!/usr/bin/python

import sys
import os, os.path
import logging
import re
import dmatch

VERSION = "0.1"
log = logging.getLogger(__name__)

if __name__ == "__main__":
    from optparse import OptionParser

    # Parser for command line
    class Parser(OptionParser):
        def __init__(self, *args, **kwargs):
            OptionParser.__init__(self, add_help_option=False, *args, **kwargs)

        def error(self, msg):
            sys.stderr.write("%s: error: %s\n\n" % (self.get_prog_name(), msg))
            self.print_help(sys.stderr)
            sys.exit(2)

    parser = Parser(usage="usage: %prog [options] distro [name]",
                    version="%prog "+ VERSION,
                    description="Match package names across distros")
    parser.add_option("--verbose", action="store_true", help="Verbose output")
    parser.add_option("--debug", action="store_true", help="Debug output")
    parser.add_option("--reindex", action="store_true", help="Rebuild indices")
    parser.add_option("--stats", action="store_true", help="Print stats instead of matches")

    (opts, args) = parser.parse_args()

    if opts.verbose and not opts.debug:
        logging.basicConfig(level=logging.INFO, stream=sys.stderr)
    elif opts.debug:
        logging.basicConfig(level=logging.DEBUG, stream=sys.stderr)
    else:
        logging.basicConfig(level=logging.WARNING, stream=sys.stderr)

    if not args:
        parser.error("please provide a distribution name")

    distros = dmatch.Distros()

    # Pick the start distribution
    pivot = distros.distro_map.get(args[0], None)
    if pivot is None:
        log.error("Distribution %s not found", args[0])
        sys.exit(1)

    # Instantiate the matcher engine
    matcher = dmatch.Matcher(distros.distros, pivot)
    if opts.verbose or opts.debug or opts.stats:
        matcher.stats()

    # List the packages we want to map
    if len(args) > 1:
        todo = args[1:]
    else:
        todo = pivot.all_packages()

    try:
        # Perform the mapping
        dnames = [d.name for d in distros.distros if d.name != args[0]]
        for pkg in todo:
            m = matcher.match(pkg)
            if opts.stats: continue
            if m is None: m = dict()
            for d in dnames:
                names = m.get(d, [])
                print "%s:%s %s:%s" % (
                        pivot.name, pkg,
                        d, ",".join(sorted(names)))

        # Print stats about the mapping, if requested
        if opts.stats:
            matcher.match_stats()
    except dmatch.UserError, e:
        print >>sys.stderr, str(e)
        sys.exit(1)
