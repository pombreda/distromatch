#!/usr/bin/python

import sys
import os, os.path
import logging
import re
import dmatch

VERSION = "0.1"
log = logging.getLogger(__name__)

class UserError(Exception):
    """
    Exception that does not cause a backtrace, but shows as an error message to
    the user
    """
    pass

if __name__ == "__main__":
    from optparse import OptionParser

    # Parser for command line
    class Parser(OptionParser):
        def __init__(self, *args, **kwargs):
            OptionParser.__init__(self, add_help_option=False, *args, **kwargs)

        def error(self, msg):
            sys.stderr.write("%s: error: %s\n\n" % (self.get_prog_name(), msg))
            self.print_help(sys.stderr)
            sys.exit(2)

    parser = Parser(usage="usage: %prog [options] distro [name]",
                    version="%prog "+ VERSION,
                    description="Match package names across distros")
    parser.add_option("--verbose", action="store_true", help="Verbose output")
    parser.add_option("--debug", action="store_true", help="Debug output")
    parser.add_option("--reindex", action="store_true", help="Rebuild indices")
    parser.add_option("--stats", action="store_true", help="Print stats instead of matches")
    parser.add_option("--dump", action="store_true", help="Dump available information about the given distribution/package")
    parser.add_option("--list", action="store_true", help="List available distributions")

    (opts, args) = parser.parse_args()

    if opts.verbose and not opts.debug:
        logging.basicConfig(level=logging.INFO, stream=sys.stderr)
    elif opts.debug:
        logging.basicConfig(level=logging.DEBUG, stream=sys.stderr)
    else:
        logging.basicConfig(level=logging.WARNING, stream=sys.stderr)

    if not dmatch.HAVE_ENGINE:
        print >>sys.stderr, "Match engine not available: %s" % dmatch.MISSING_ENGINE_REASON
        sys.exit(1)

    if not args and not (opts.reindex or opts.list):
        parser.error("please provide a distribution name")

    distros = dmatch.Distros(reindex=opts.reindex)

    # List distributions
    if opts.list:
        if len(args) == 0:
            for d in distros.distro_map.values():
                print "%s\tstyle: %s" % (d.name, d.style)
        else:
            for name in args:
                d = distros.distro_map[name]
                for pkg in d.all_packages():
                    print pkg
        sys.exit(0)

    if opts.reindex and not args:
        for d in distros.distros:
            d.stats()
        sys.exit(0)

    # Dump information
    if opts.dump:
        dist = distros.distro_map[args[0]]
        if len(args) > 1:
            todo = args[1:]
        else:
            todo = dist.all_packages()
        todo.sort()
        for name in todo:
            dist.dump_info(name, sys.stdout)
        sys.exit(0)

    # Instantiate the matcher engine
    matcher = distros.make_matcher(args[0])
    if matcher is None:
        print >>sys.stderr, "Cannot create matcher"
        sys.exit(1)

    if opts.verbose or opts.debug or opts.stats:
        matcher.stats()

    # List the packages we want to map
    if len(args) > 1:
        todo = args[1:]
    else:
        todo = matcher.pivot.all_packages()

    try:
        # Perform the mapping
        dnames = [d.name for d in distros.distros if d.name != args[0]]
        for pkg in todo:
            if not matcher.pivot.has_package(pkg):
                raise UserError("Package %s not found" % pkg)
            m = matcher.match(pkg)
            if opts.stats: continue
            if m is None: m = dict()
            for d in dnames:
                names = m.get(d, [])
                print "%s:%s %s:%s" % (
                        matcher.pivot.name, pkg,
                        d, ",".join(sorted(names)))

        # Print stats about the mapping, if requested
        if opts.stats:
            matcher.match_stats()
    except UserError, e:
        print >>sys.stderr, str(e)
        sys.exit(1)
